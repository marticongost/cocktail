<?xml version="1.0" encoding="utf-8"?>

<ui:cocktail.ui.ActionListEntry
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui"
    selectionType="single"
    activationType="singleClick"
    selectableEntriesSelector=".Entry"
    selectionAxis="horizontal"
    tabindex="0">

    <ui:symbol name="ENTRY_MAP"/>
    <ui:symbol name="ENTRIES_READY"/>
    <ui:symbol name="SYNC_SELECTION"/>

    <ui:using mixin="cocktail.ui.DataDisplay"/>
    <ui:using mixin="cocktail.ui.Selectable"/>

    <ui:property
        name="entryCount"
        type="number"
        reflected="true"
        default="empty"/>

    <?class
    get entriesReady() {
        return this[ENTRIES_READY];
    }

    getEntry(value) {
        const serializedValue = this.dataBinding.member.serializeValue(value);
        return this[ENTRY_MAP][serializedValue];
    }

    clearEntries() {
        cocktail.ui.empty(this.entries);
        this[ENTRIES_READY] = false;
        this[ENTRY_MAP] = {};
        this.entryCount = "empty";
    }

    addEntries(values) {

        if (values) {
            for (let value of values) {
                this.addEntry(value);
            }
        }

        // Reflect the number of entries for styling purposes
        const count = this.entries.childNodes.length;
        if (count == 0) {
            this.entryCount = "empty";
        }
        else if (count == 1) {
            this.entryCount = "single-entry";
        }
        else {
            this.entryCount = "multiple-entries";
        }
    }

    addEntry(value) {
        const entry = this.createEntry(value);
        this[ENTRY_MAP][this.dataBinding.member.serializeValue(value)] = entry;
        this.entries.appendChild(entry);
    }

    createEntry(value, prepend = false) {
        const serializedValue = this.dataBinding.member.serializeValue(value);
        const entry = this.constructor.Entry.create();
        entry.member = this.dataBinding.member;
        entry.value = value;
        return entry;
    }

    selectionActivated() {
        this.value = this.selectedElement.value;
    }
    ?>

    <?js
    this[ENTRY_MAP] = {};
    this[ENTRIES_READY] = false;
    this[SYNC_SELECTION] = cocktail.ui.sync();
    ?>

    <?on selectionChanged
    this[SYNC_SELECTION](() => {
        this.value = this.selectedElement ? this.selectedElement.value : null;
    });
    ?>

    <?on value:changed
    this[SYNC_SELECTION](() => {
        this.selectedElement = newValue ? this.getEntry(newValue) : null;
    });
    ?>

    <?on dataBinding:changed
    const possibleValuesResolution = Promise.resolve(this.dataBinding.member.getPossibleValues());
    possibleValuesResolution.then((values) => {
        this.addEntries(values);
        this[ENTRIES_READY] = true;
        this.selectedElement = this.value ? this.getEntry(this.value) : null;
        cocktail.ui.trigger(this, "entriesReady");
    });
    ?>

    <?on selectionChanged
    for (let entry of e.detail.removed) {
        entry.setAttribute("aria-checked", "false");
    }

    for (let entry of e.detail.added) {
        entry.setAttribute("aria-checked", "true");
    }
    ?>

    <div id="entries" role="radiogroup"/>

    <div ui:component="Entry" role="radio">

        <ui:property
            name="value"
            reflected="false">
            <?on changed
            this.label.innerHTML = this.member.translateValue(newValue);
            ?>
        </ui:property>

        <div id="label"/>
    </div>

</ui:cocktail.ui.ActionListEntry>

