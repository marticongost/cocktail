<?xml version="1.0" encoding="utf-8"?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.actions"/>

    <ui:property
        name="actions"
        reflected="false">
        <?on changed
        this.reset();
        ?>
    </ui:property>

    <?head
    const SELECTION_CHANGED_HANDLER = Symbol();
    ?>

    <ui:property
        name="selectable"
        reflected="false">
        <?on changed
        if (oldValue) {
            oldValue.removeEventListener(this[SELECTION_CHANGED_HANDLER])
        }
        if (newValue) {
            newValue.addEventListener("selectionChanged", this[SELECTION_CHANGED_HANDLER]);
        }
        this[SELECTION_CHANGED_HANDLER](null);
        ?>
    </ui:property>

    <?class
    getActionContext() {
        let context = Object.assign({}, this.actionParameters);
        let selectable = this.selectable;
        context.selectable = selectable;
        context.toolbar = this;
        context.selection = selectable ? selectable.selectedValues : [];
        return context;
    }

    reset() {
        this.clear();
        this.createEntries();
    }

    clear() {
        cocktail.ui.empty(this.entryList);
    }

    createEntries() {
        let context = this.getActionContext();
        for (let action of this.actions) {
            let entry = this.createEntry(action);
            this.entryList.appendChild(entry);
            entry.state = action.getState(context);
        }
        cocktail.ui.trigger(this, "entriesReady");
    }

    createEntry(action) {
        let entry = this.constructor.Entry.create();
        entry.action = action;
        return entry;
    }
    ?>

    <?js
    this.actionParameters = {};

    this[SELECTION_CHANGED_HANDLER] = function (e) {
        for (let entry of instance.entryList.children) {
            entry.state = entry.action.getState(instance.getActionContext());
        }
    }
    ?>

    <ul id="entryList"/>

    <li ui:component="Entry">

        <ui:property
            name="action"
            reflected="false">
            <?on changed
            if (newValue) {
                this.setAttribute("action", newValue.id);
                cocktail.loadSVG(newValue.iconURL, this.icon);
                let shortcut = newValue.shortcut;
                let label = newValue.translate();
                if (shortcut) {
                    label = label.replace(new RegExp(shortcut, "i"), function (c) {
                        return `<u>${c}</u>`;
                    });
                }
                this.button.accessKey = shortcut;
                this.label.innerHTML = label;
            }
            else {
                this.removeAttribute("action");
                cocktail.ui.empty(this.icon);
                cocktail.ui.empty(this.label);
            }
            ?>
        </ui:property>

        <ui:property
            name="state"
            reflected="true">
            <?on changed
            if (oldValue == "disabled") {
                this.button.disabled = false;
            }
            else if (newValue == "disabled") {
                this.button.disabled = true;
            }
            ?>
        </ui:property>

        <button
            id="button"
            type="button">

            <span id="icon"/>
            <span id="label"/>

            <?on click
            instance.action.invoke(instance.parentInstance.getActionContext());
            ?>

        </button>

    </li>

</div>

