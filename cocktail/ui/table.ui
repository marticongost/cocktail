<?xml version="1.0" encoding="utf-8"?>

<ui:element
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui"
    dataState="pending"
    columnsReady="false"
    selectableEntriesSelector=".cocktail-ui-Table-Row">

    <ui:using mixin="cocktail.ui.Selectable"/>
    <ui:using mixin="cocktail.ui.DataSourceConsumer"/>
    <ui:using mixin="cocktail.ui.DataDisplay"/>

    <ui:requires component="cocktail.ui.datasources"/>
    <ui:requires component="cocktail.ui.displayfactories"/>
    <ui:requires component="cocktail.ui.RadioSelector"/>

    <ui:resource href="cocktail.ui://scripts/scrollwatcher.js"/>
    <ui:symbol name="CONTENT_XHR_REQUEST"/>

    <?tail
    cls.delegatesFocus = true;

    cls.SortAction = class SortAction extends cocktail.ui.Action {

        constructor(member, language, direction, position = null) {
            super("sort-" + direction, position);
            this.member = member;
            this.language = language;
            this.direction = direction;
            this.order = member.name;
            if (this.language) {
                this.order += "-" + this.language;
            }
            if (this.direction == "descending") {
                this.order = "-" + this.order;
            }
        }

        get iconURL() {
            return `cocktail.ui://images/${this.id}.svg`;
        }

        getState(context) {

            if (context.table.order == this.order) {
                return "emphasized";
            }

            return super.getState(context);
        }

        invoke(context) {
            context.table.order = this.order;
        }
    }
    ?>

    <?on dataBinding:changed
    if (cocktail.isEmptyValue(this.visibleMembers)) {
        let model = newValue.member.items.type;
        this.visibleMembers = new Set(
            Array.from(model.orderedMembers()).filter(
                (member) => member[cocktail.ui.listedByDefault]
            )
        );
    }
    if (!this.value) {
        this.value = newValue.member.dataSource;
    }
    ?>

    <?on keydown
    // The RIGHT and LEFT key expand / collapse tree rows
    if (this.selectionCursor && this.selectionCursor instanceof cls.TreeRow) {
        if (e.which == cocktail.ui.keys.RIGHT) {
            e.preventDefault();
            e.stopPropagation();
            this.selectionCursor.expanded = true;
        }
        else if (e.which == cocktail.ui.keys.LEFT) {
            e.preventDefault();
            e.stopPropagation();
            this.selectionCursor.expanded = false;
        }
    }
    ?>

    <ui:property
        name="autoload"
        type="boolean"
        reflected="true"
        default="false"/>

    <ui:property
        name="visibleLocales"
        type="identifiers"
        reflected="true"
        default="[]">
        <?on changed
        if (this.autoload && this.dataBinding && this.value) {
            this.reset();
        }
        ?>
    </ui:property>

    <ui:property name="localesParameter" type="string" default="locales" reflected="true"/>

    <ui:property
        name="visibleMembers"
        reflected="false">
        <?on changed
        if (this.autoload && this.dataBinding && this.value) {
            this.reset();
        }
        ?>
    </ui:property>

    <ui:property name="membersParameter" type="string" default="members" reflected="true"/>

    <ui:property name="paging" type="string" reflected="true">
        <?on changed
        if (newValue == "infiniteScroll") {
            this.scrollWatcher.target = this.body;
        }

        if (oldValue == "infiniteScroll") {
            this.scrollWatcher.target = null;
        }
        ?>
    </ui:property>

    <ui:property name="resultCount" reflected="false"/>
    <ui:property name="empty" type="boolean" default="true" reflected="true"/>
    <ui:property name="page" type="number" default="0" reflected="true"/>
    <ui:property name="pageSize" type="number" default="100" reflected="true"/>
    <ui:property name="pageParameter" type="string" default="page" reflected="true"/>
    <ui:property name="pageSizeParameter" type="string" default="page_size" reflected="true"/>

    <ui:property
        name="autoExpand"
        type="boolean"
        default="false"
        reflected="true"/>

    <ui:property name="searchValues" reflected="false">
        <?on changed
        if (this.autoload) {
            this.reload();
        }
        ?>
    </ui:property>

    <ui:property name="searchSchema" reflected="false">
        <?on changed
        if (newValue) {
            this.searchValues = newValue.defaults();
        }
        ?>
    </ui:property>

    <ui:property
        name="hierarchical"
        type="boolean"
        reflected="true"
        default="false"/>

    <ui:property
        name="treeRelations"
        reflected="false">
        <?on changed
        this.hierarchical = Boolean(newValue);
        this.appliesAlternateCSSClasses = Boolean(newValue);
        ?>
    </ui:property>

    <ui:property
        name="sortable"
        reflected="true"
        type="boolean"
        default="false">
        <?on changed
        if (this.headers) {
            for (let child of this.headers.children) {
                child.dropdownEnabled = newValue;
            }
        }
        ?>
    </ui:property>

    <ui:property
        name="order"
        type="string"
        reflected="true">

        <?on changed
        if (oldValue) {
            const header = this.getHeaderForOrder(oldValue);
            if (header) {
                header.sorted = false;
                header.headerActions.updateActions();
            }
        }

        if (newValue) {
            const header = this.getHeaderForOrder(newValue);
            if (header) {
                header.sorted = true;
                header.headerActions.updateActions();
            }
        }

        if (this.autoload) {
            this.reload();
        }
        ?>
    </ui:property>

    <?class
    get model() {
        return this.dataBinding && this.dataBinding.member.items.type;
    }

    set model(value) {
        this.dataBinding = {
            member: new cocktail.schema.Collection({
                items: new cocktail.schema.Reference({
                    type: value
                })
            })
        };
    }

    invalidation(changes) {

        if (this.autoload && changes.created.size) {
            this.reload();
        }
        else {
            // Remove the rows representing deleted objects
            for (let [id, object] of changes.deleted) {
                const row = this.getRowById(id);
                if (row) {
                    row.parentNode.removeChild(row);
                }
            }

            // Update the rows representing modified objects
            for (let [id, object] of changes.modified) {
                const row = this.getRowById(id);
                if (row) {
                    row.value = object;
                }
            }
        }
    }

    update() {
        this.loadPage(this.page);
    }

    async loadPage(page) {

        // Abort any previously running request
        const currentRequest = this[CONTENT_XHR_REQUEST];
        if (currentRequest) {
            currentRequest.abort();
        }

        this.dataState = "loading";
        this.createColumns();

        const options = this.getDataSourceOptions(page);
        const request = this.value.load(options);
        this[CONTENT_XHR_REQUEST] = request.xhr;

        let data;

        try {
            data = await request;
            if (this[CONTENT_XHR_REQUEST] !== request.xhr) {
                return null;
            }
            this.resultCount = data.count;
            if (this.paging == "infiniteScroll") {
                this.addRows(data.records);
            }
            else {
                this.setRows(data.records);
            }
            this.dataState = "loaded";
        }
        catch (error) {
            this.dataState = "error";
            this.errorMessage.innerText = error.toString();
            cocktail.ui.trigger(this, "error", {error: error});
        }
        finally {
            this[CONTENT_XHR_REQUEST] = null;
        }

        return data;
    }

    getDataSourceOptions(page) {

        let options = {
            parameters: {[this.pageParameter]: page}
        }

        if (this.pageSizeParameter) {
            this.addPageSizeParameter(options);
        }

        if (this.localesParameter) {
            this.addLocalesParameter(options);
        }

        if (this.membersParameter) {
            this.addMembersParameter(options);
        }

        if (this.searchSchema && this.searchValues) {
            this.addSearchParameter(options);
        }

        if (this.order) {
            this.addOrderParameter(options);
        }

        return options;
    }

    addPageSizeParameter(options) {
        options.parameters[this.pageSizeParameter] = this.pageSize;
    }

    addLocalesParameter(options) {
        options.parameters[this.localesParameter] = Array(...this.visibleLocales);
    }

    addMembersParameter(options) {
        let fields = new Set();
        for (let member of this.visibleMembers) {
            for (let field of member[cocktail.ui.dataSourceFields]) {
                fields.add(field);
            }
        }
        options.parameters[this.membersParameter] = Array.from(fields);
    }

    addSearchParameter(options) {
        for (let member of this.searchSchema.members()) {
            let value = this.searchValues[member.name];
            if (value !== null && value !== undefined && value !== "") {
                this.addSearchCriteriaParameter(options, member, value);
            }
        }
    }

    addSearchCriteriaParameter(options, member, value) {
        let paramName = this.getSearchCriteriaParameterName(member);
        let paramValue = this.getSearchCriteriaParameterValue(member, value);
        options.parameters[paramName] = paramValue;
    }

    getSearchCriteriaParameterName(member) {
        return "search_" + member.name;
    }

    getSearchCriteriaParameterValue(member, value) {
        return member.serializeValue(value);
    }

    addOrderParameter(options) {
        options.parameters.order = this.order;
    }

    loadNextPage() {
        let nextPage = this.page + 1;
        return this.loadPage(nextPage).then((data) => {
            this.page = nextPage;
            return data;
        });
    }

    createColumns() {

        if (this.columnsReady) {
            return;
        }
        this.columnsReady = true;

        if (this.treeRelations) {
            const header = document.createElement("div");
            header.id = "expanderHeader";
            this.headers.append(header);
        }

        for (let member of this.visibleMembers) {
            let locales = member.translated ? this.visibleLocales : [null];
            for (let language of locales) {
                const header = this.createHeader(member, language);
                this.headers.appendChild(header);
            }
        }
    }

    createHeader(member, language = null) {
        let header = this.constructor.Header.create();
        header.member = member;
        header.language = language;
        member[cocktail.ui.addAnnotations](header, language);
        header.memberLabel.innerHTML = member.translate();
        if (language) {
            header.languageLabel.innerHTML = cocktail.ui.translations["cocktail.locales." + language];
        }
        else {
            header.languageLabel.style.display = "none";
        }
        cocktail.ui.Table.setCellWidth(header, member);
        header.headerActions.actionContext.table = this;
        header.headerActions.actionSource = this.getHeaderActions(member, language);
        header.headerActions.actionSetup();

        if (this.order) {
            let headerOrder = member.name;
            if (language) {
                headerOrder += "-" + language;
            }
            let tableOrder = this.order;
            if (tableOrder.charAt(0) == "-") {
                tableOrder = tableOrder.substr(1);
            }
            if (headerOrder == tableOrder) {
                header.sorted = true;
            }
        }

        if (!this.sortable || !member[cocktail.ui.sortable]) {
            header.dropdownEnabled = false;
        }

        return header;
    }

    getHeaderActions(member, language = null) {
        return new cocktail.ui.ActionSet("table-header", {
            entries: [
                new cls.SortAction(member, language, "ascending"),
                new cls.SortAction(member, language, "descending")
            ]
        });
    }

    setRows(records) {
        this.clearRows();
        this.addRows(records);
    }

    addRows(records) {

        let row;

        for (let record of records) {
            row = this.addRow(record);
        }

        // Subtract the scrollbar width from the headers row
        let table = this;
        function fixScrollWidth() {
            let outerWidth = table.body.offsetWidth;
            if (outerWidth) {
                let innerWidth = table.body.clientWidth;
                if (innerWidth != outerWidth) {
                    table.headers.style.paddingRight = `${outerWidth - innerWidth}px`;
                    return;
                }
            }

            setTimeout(fixScrollWidth, 25);
        }
        fixScrollWidth();
    }

    reset() {
        this.clear();
        this.createColumns();
        this.update();
    }

    clear() {
        cocktail.ui.empty(this.headers);
        this.columnsReady = false;
        this.clearRows();
    }

    clearRows() {
        this.page = 0;
        cocktail.ui.empty(this.body);
        this.scrollWatcher.reset();
    }

    reload() {
        if (this.dataBinding && this.value && this.dataState != "loading") {
            this.dataState = "loading";
            this.clearRows();
            this.loadPage(0).then(() => this.page = 0);
        }
    }

    get rows() {
        return this.body.childNodes;
    }

    addRow(record, position = null) {

        let row = this.createRow(record);

        if (position) {
            let anchor = (position.before || position.after || position.inside);

            if (typeof(anchor) == "string") {
                anchor = this.getRow(anchor);
            }

            if (!anchor) {
                throw `Invalid row position: ${position}`;
            }

            if (position.inside) {
                row.depth = position.inside.depth + 1;
                anchor.nestedRowsContainer.appendChild(row);
            }
            else {
                if (position.after) {
                    anchor = anchor.nextSibling;
                }
                this.body.insertBefore(row, anchor);
            }
        }
        else {
            this.body.appendChild(row);
        }

        row.expanded = this.autoExpand;
        return row;
    }

    createRow(record) {
        const rowComponent = this.treeRelations ? this.constructor.TreeRow : this.constructor.Row;
        const row = rowComponent.create();
        row.treeRelations = this.treeRelations;
        row.visibleMembers = this.visibleMembers;
        row.visibleLocales = this.visibleLocales;
        row.dataBinding = this.dataBinding.itemBinding(null, record);
        return row;
    }

    getRow(value) {
        if (this.dataBinding && this.dataBinding.member.items && value !== null && value !== undefined) {
            value = this.dataBinding.member.items.serializeValue(value);
            if (value) {
                return this.body.querySelector(`[value='${value}']`);
            }
        }
        return null;
    }

    getRowById(id) {
        if (this.dataBinding && this.dataBinding.member.items) {
            if (typeof(id) != "string") {
                id = this.dataBinding.member.items.relatedType.primaryMember.serializeValue(id);
            }
            return this.body.querySelector(`[value='${id}']`);
        }
        return null;
    }

    static setCellWidth(cell, member) {
        const width = member[cocktail.ui.columnWidth];
        if (width !== undefined) {
            if (typeof(width) == "number") {
                cell.style.flex = `0 0 ${width}em`;
                cell.style.maxWidth = `${width}em`;
            }
            else {
                cell.style.flex = width;
            }
        }
    }

    get selectionContainer() {
        return this.body;
    }

    getSelectionMotionForKeyboardEvent(e) {

        if (this.selectionCursor && this.selectionCursor instanceof cls.TreeRow) {

            // Alt + UP and Alt + DOWN jump over branches
            if (e.altKey) {
                if (e.which == cocktail.ui.keys.UP) {
                    if (this.selectionCursor.previousElementSibling) {
                        return {direction: "up", target: this.selectionCursor.previousElementSibling};
                    }
                }
                else if (e.which == cocktail.ui.keys.DOWN) {
                    if (this.selectionCursor.nextElementSibling) {
                        return {direction: "up", target: this.selectionCursor.nextElementSibling};
                    }
                }
            }
            // PREV PAGE goes back to the parent
            else if (e.which == cocktail.ui.keys.PREV_PAGE) {
                return {direction: "up", target: this.selectionCursor.parentRow};
            }
        }

        return super.getSelectionMotionForKeyboardEvent(e);
    }

    getHeader(member, language = null) {
        if (typeof(member) != "string") {
            member = member.name;
        }
        let selector = `[member='${member}']`;
        if (language) {
            selector += `[lang='${language}']`;
        }
        return this.headers.querySelector(selector);
    }

    getHeaderForOrder(orderStr) {

        if (orderStr.charAt(0) == "-") {
            orderStr = orderStr.substr(1);
        }

        let pos = orderStr.indexOf("-");

        if (pos == -1) {
            return this.getHeader(orderStr);
        }
        else {
            return this.getHeader(
                orderStr.substr(0, pos),
                orderStr.substr(pos + 1)
            );
        }
    }
    ?>

    <?js
    let table = this;
    this.scrollWatcher = new cocktail.ui.ScrollWatcher();
    this.scrollWatcher.callback = function () {
        table.loadNextPage()
            .then((data) => {
                if (data.records.length) {
                    this.reset();
                }
            });
    }
    ?>

    <div id="table">

        <div id="headers"/>

        <div id="body" tabindex="0">
            <?js
            let observer = new MutationObserver((mutations) => {
                instance.empty = !element.childNodes.length;
            });
            observer.observe(element, {childList: true});
            ?>
        </div>

    </div>

    <ui:cocktail.ui.DropdownPanel ui:component="Header">

        <ui:resource href="cocktail.ui://styles/cocktail-ui-table--header.scss.css"/>

        <ui:property
            name="sorted"
            type="boolean"
            reflected="true"
            default="false"/>

        <div id="headerLabel" slot="label">
            <span id="memberLabel"/>
            <span id="languageLabel"/>
        </div>

        <ui:HeaderActions id="headerActions">
            <?js
            element.classList.add("without-frame");
            element.classList.add("vertical");
            ?>
        </ui:HeaderActions>

        <ui:cocktail.ui.ActionList ui:component="HeaderActions"/>

    </ui:cocktail.ui.DropdownPanel>

    <div ui:component="Row">

        <ui:using mixin="cocktail.ui.DataDisplay"/>

        <?class
        get table() {
            return this.parentInstance;
        }

        get cells() {
            return this.childNodes;
        }

        get invalidable() {
            // Leave the invalidation logic to the parent Table
            return false;
        }

        createCells() {

            for (let member of this.visibleMembers) {
                if (member.translated) {
                    for (let locale of this.visibleLocales) {
                        this.rowContent.appendChild(this.createCell(member, locale));
                    }
                }
                else {
                    this.rowContent.appendChild(this.createCell(member));
                }
            }
        }

        updateCells() {
            // Update cell values
            for (let cell of this.cells) {
                if (cell.dataBinding) {
                    let member = cell.dataBinding.member;
                    let value = this.value[member.name];
                    if (member.translated && cell.dataBinding.language) {
                        value = value[cell.dataBinding.language];
                    }
                    cell.value = value;
                }
            }
        }

        createCell(member, language = null) {
            let cell = this.constructor.Cell.create();
            cell.dataBinding = this.dataBinding.memberBinding(member, language);
            return cell;
        }

        getCell(member, language = null) {
            if (typeof(member) != "string") {
                member = member.name;
            }
            for (let cell of this.cells) {
                if (
                    cell.dataBinding
                    && cell.dataBinding.member.name == member
                    && (
                        !language
                        || cell.dataBinding.language == language
                    )
                ) {
                    return cell;
                }
            }
            return null;
        }
        ?>

        <?on value:changed
        this.setAttribute(
            "value",
            this.dataBinding ?
                this.dataBinding.member.serializeValue(newValue)
                : ""
        );

        if (!this.cells.length) {
            this.createCells();
        }
        else {
            this.updateCells();
        }
        ?>

        <?js
        this.rowContent = this;
        ?>

        <div ui:component="Cell">

            <ui:using mixin="cocktail.ui.DataDisplay"/>

            <?class
            get row() {
                return this.parentNode;
            }

            get table() {
                return this.parentInstance;
            }
            ?>

            <?on value:changed
            cocktail.ui.empty(this);
            this.display = null;

            // Render the value using a custom component, if available, or fall
            // back to a string representation
            this.display = cocktail.ui.displays.createDisplay(
                this.dataBinding.childBinding(
                    this.dataBinding.object,
                    this.dataBinding.member,
                    this.dataBinding.language,
                    null,
                    newValue
                ),
                {wrapRawValues: false}
            );

            if (this.display) {
                this.appendChild(this.display);
            }
            else {
                this.innerHTML = this.dataBinding.member.translateValue(newValue);
            }

            cocktail.ui.Table.setCellWidth(this, this.dataBinding.member);
            ?>

        </div>

    </div>

    <ui:Row ui:component="TreeRow">

        <ui:property
            name="expanded"
            type="boolean"
            reflected="true"
            default="false">
            <?on changed
            if (newValue) {
                this.loadNestedRows();
            }
            else {
                this.clearNestedRows();
            }
            ?>
        </ui:property>

        <ui:property
            name="depth"
            type="number"
            reflected="true"
            default="0">
            <?on changed
            this.style.setProperty("--depth", newValue);

            for (let nestedRow of this.nestedRows) {
                nestedRow = newValue + 1;
            }
            ?>
        </ui:property>

        <ui:property
            name="hasNestedRows"
            type="boolean"
            reflected="true"
            default="false"/>

        <?class
        get cells() {
            const nodes = Array.from(this.rowContent.childNodes);
            nodes.shift();
            return nodes;
        }

        get parentRow() {
            return this.parentNode ? this.parentNode.parentNode : null;
        }

        getRowLabel() {
            return this.translateValue();
        }

        get nestedRows() {
            return this.nestedRowsContainer.childNodes;
        }

        loadNestedRows() {
            this.clearNestedRows();
            const table = this.table;
            for (let child of this.iterObjectChildren(this.value)) {
                table.addRow(child, {inside: this});
            }
        }

        objectHasChildren(obj) {
            for (let child of this.iterObjectChildren(obj)) {
                return true;
            }
            return false;
        }

        *iterObjectChildren(obj) {
            const model = obj._class;
            if (model) {
                for (let member of this.treeRelations) {
                    if (model.isSchema(member.owner)) {
                        const children = obj[member.name];
                        if (children) {
                            yield *children;
                        }
                    }
                }
            }
        }

        clearNestedRows() {
            cocktail.ui.empty(this.nestedRowsContainer);
        }
        ?>

        <?on value:changed
        instance.rowLabel.innerHTML = instance.getRowLabel();
        instance.hasNestedRows = this.objectHasChildren(this.value);
        ?>

        <div id="rowContent">
            <div id="rowExpander">
                <button id="rowExpanderIcon">
                    <?svg cocktail.ui://images/row-expander.svg ?>
                    <?on click
                    instance.expanded = !instance.expanded;
                    e.stopPropagation();
                    e.preventDefault();
                    ?>
                </button>
                <span id="emptyRowIcon">
                    <?svg cocktail.ui://images/empty-row.svg ?>
                </span>
                <span id="rowLabel"/>
            </div>
        </div>

        <div id="nestedRowsContainer"/>

    </ui:Row>

    <ui:cocktail.ui.LoadingSign id="loadingSign"/>

    <div id="errorBox">
        <ui:translation/>
        <div id="errorMessage"/>
    </div>

    <div id="emptyNotice">
        <ui:translation/>
    </div>

</ui:element>

