<?xml version="1.0" encoding="utf-8"?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui"
    dataState="pending"
    columnsReady="false">

    <ui:requires component="cocktail.ui.databinding"/>
    <ui:decoratedBy function="cocktail.ui.dataBound"/>
    <ui:resource href="cocktail.ui://scripts/scrollwatcher.js"/>

    <ui:property name="member">
        <?on changed
        this.visibleColumns = new Set(newValue.members());
        ?>
    </ui:property>

    <ui:property name="languages" type="identifiers" reflected="true" default="[]"/>
    <ui:property name="languagesParameter" type="string" default="languages" reflected="true"/>

    <ui:property name="visibleColumns"/>

    <ui:property name="paging" type="string" reflected="true">
        <?on changed
        if (newValue == "infiniteScroll") {
            this.scrollWatcher.target = this.body;
        }

        if (oldValue == "infiniteScroll") {
            this.scrollWatcher.target = null;
        }
        ?>
    </ui:property>

    <ui:property name="empty" type="boolean" default="true" reflected="true"/>
    <ui:property name="page" type="number" default="0" reflected="true"/>
    <ui:property name="pageSize" type="number" default="100" reflected="true"/>
    <ui:property name="pageParameter" type="string" default="page" reflected="true"/>
    <ui:property name="pageSizeParameter" type="string" default="page_size" reflected="true"/>

    <?class
    update() {
        this.loadPage(this.page);
    }

    loadPage(page) {

        let table = this;
        let append = (this.paging == "infiniteScroll");

        this.dataState = "loading";

        if (!this.columnsReady) {
            this.createColumns();
            this.columnsReady = true;
        }

        let parameters = {
            [this.pageParameter]: page
        }

        if (this.pageSizeParameter) {
            parameters[this.pageSizeParameter] = this.pageSize;
        }

        if (this.languagesParameter) {
            parameters[this.languagesParameter] = Array(...this.languages);
        }

        return this.dataSource
            .load({parameters})
            .then(function (data) {
                if (append) {
                    table.addRows(data);
                }
                else {
                    table.setRows(data);
                }
                table.dataState = "loaded";
            })
            .catch(function (error) {
                table.dataState = "error";
                table.errorMessage.innerText = error.toString();
                cocktail.ui.trigger(table, "error", {error: error});
            });
    }

    loadNextPage() {
        let nextPage = this.page + 1;
        this.loadPage(nextPage).then(() => this.page = nextPage);
    }

    createColumns() {
        for (let member of this.member.members()) {
            let languages = member.translated ? this.languages : [null];
            for (let language of languages) {
                let heading = this.createHeading(member, language);
                this.headingsRow.appendChild(heading);
            }
        }
    }

    createHeading(member, language = null) {
        let heading = this.constructor.Heading.create();
        heading.member = member;
        heading.language = language;
        heading.setAttribute("column", member.name);
        heading.label.innerHTML = member.translate();
        if (language) {
            heading.languageLabel.innerHTML = language; // TODO: translate this
        }
        else {
            heading.languageLabel.style.display = "none";
        }
        return heading;
    }

    setRows(records) {
        this.clearRows();
        this.addRows(records);
    }

    addRows(records) {

        let row;

        for (let record of records) {
            row = this.createRow(record);
            this.body.appendChild(row);
        }

        if (row) {
            this.empty = false;
        }

        // Subtract the scrollbar width from the headings row
        let table = this;
        setTimeout(function () {
            table.headingsRow.style.width = `calc(100% - ${table.body.offsetWidth - table.body.clientWidth}px)`;
        }, 1);
    }

    clearRows() {
        cocktail.ui.empty(this.body);
    }

    createRow(record) {
        let row = document.createElement("tr");
        for (let member of this.member.members()) {
            let languages = member.translated ? this.languages : [null];
            for (let language of languages) {
                let cell = this.createCell(record, member, language);
                row.appendChild(cell);
            }
        }
        return row;
    }

    createCell(record, member, language) {

        let cell = document.createElement("td");
        cell.member = member;
        cell.language = language;
        cell.setAttribute("data-column", member.name);

        // Render the value using a custom component, if available, or fall
        // back to a string representation
        let value = this.dataSource.getValue(record, member, language);
        let displayFactory = member[cocktail.ui.DISPLAY];

        if (displayFactory) {
            let display = cocktail.ui.createDisplay(displayFactory, {object: record, member, language, value});
            cell.appendChild(display);
            display.update();
        }
        else {
            cell.innerHTML = member.translateValue(value);
        }

        return cell;
    }
    ?>

    <?js
    let table = this;
    this.scrollWatcher = new cocktail.ui.ScrollWatcher();
    this.scrollWatcher.callback = function () {
        table.loadNextPage();
        this.reset();
    }
    ?>

    <table id="table">

        <thead id="head">
            <tr id="headingsRow"/>
        </thead>

        <tbody id="body"/>

        <th ui:component="Heading">
            <span id="label"/>
            <span id="languageLabel"/>
        </th>

    </table>

    <ui:cocktail.ui.LoadingSign id="loadingSign"/>

    <div id="errorBox">
        <ui:translation/>
        <div id="errorMessage"/>
    </div>

</div>

