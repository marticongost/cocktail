<?xml version="1.0" encoding="utf-8"?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui"
    dataState="pending"
    columnsReady="false">

    <ui:requires component="cocktail.ui.selectable"/>
    <ui:requires component="cocktail.ui.datadisplay"/>
    <ui:requires component="cocktail.ui.datasources"/>

    <ui:decoratedBy function="cocktail.ui.selectable"/>
    <ui:decoratedBy function="cocktail.ui.dataDisplay"/>
    <ui:decoratedBy function="cocktail.ui.dataSourceConsumer"/>

    <ui:resource href="cocktail.ui://scripts/scrollwatcher.js"/>

    <?tail
    cls.delegatesFocus = true;
    ?>

    <?on dataBinding:changed
    if (cocktail.isEmptyValue(this.visibleMembers)) {
        let model = newValue.member.items.type;
        this.visibleMembers = new Set(
            Array.from(model.orderedMembers()).filter(
                (member) => member[cocktail.ui.listedByDefault]
            )
        );
    }
    if (!this.value) {
        this.value = newValue.member.dataSource;
    }
    ?>

    <ui:property
        name="autoload"
        type="boolean"
        reflected="true"
        default="false"/>

    <ui:property
        name="visibleLocales"
        type="identifiers"
        reflected="true"
        default="[]">
        <?on changed
        if (this.autoload && this.dataBinding && this.value) {
            this.reset();
        }
        ?>
    </ui:property>

    <ui:property name="localesParameter" type="string" default="locales" reflected="true"/>

    <ui:property
        name="visibleMembers"
        reflected="false">
        <?on changed
        if (this.autoload && this.dataBinding && this.value) {
            this.reset();
        }
        ?>
    </ui:property>

    <ui:property name="membersParameter" type="string" default="members" reflected="true"/>

    <ui:property name="paging" type="string" reflected="true">
        <?on changed
        if (newValue == "infiniteScroll") {
            this.scrollWatcher.target = this.body;
        }

        if (oldValue == "infiniteScroll") {
            this.scrollWatcher.target = null;
        }
        ?>
    </ui:property>

    <ui:property name="resultCount" reflected="false"/>
    <ui:property name="empty" type="boolean" default="true" reflected="true"/>
    <ui:property name="page" type="number" default="0" reflected="true"/>
    <ui:property name="pageSize" type="number" default="100" reflected="true"/>
    <ui:property name="pageParameter" type="string" default="page" reflected="true"/>
    <ui:property name="pageSizeParameter" type="string" default="page_size" reflected="true"/>

    <ui:property name="searchValues" reflected="false">
        <?on changed
        if (this.autoload) {
            this.reload();
        }
        ?>
    </ui:property>

    <ui:property name="searchSchema" reflected="false">
        <?on changed
        if (newValue) {
            this.searchValues = newValue.defaults();
        }
        ?>
    </ui:property>

    <?class
    get model() {
        return this.dataBinding && this.dataBinding.member.items.type;
    }

    set model(value) {
        this.dataBinding = {
            member: new cocktail.schema.Collection({
                items: new cocktail.schema.Reference({
                    type: value
                })
            })
        };
    }

    invalidation(change) {
        if (this.autoload && (change.type == "create" || (change.type == "delete" && !change.id))) {
            this.reload();
        }
    }

    update() {
        this.loadPage(this.page);
    }

    loadPage(page) {

        let table = this;
        let append = (this.paging == "infiniteScroll");

        this.dataState = "loading";
        this.createColumns();

        return this.value
            .load(this.getDataSourceOptions(page))
            .then(function (data) {
                table.resultCount = data.count;
                if (append) {
                    table.addRows(data.records);
                }
                else {
                    table.setRows(data.records);
                }
                table.dataState = "loaded";
            })
            .catch(function (error) {
                table.dataState = "error";
                table.errorMessage.innerText = error.toString();
                cocktail.ui.trigger(table, "error", {error: error});
            });
    }

    getDataSourceOptions(page) {

        let options = {
            parameters: {[this.pageParameter]: page}
        }

        if (this.pageSizeParameter) {
            this.addPageSizeParameter(options);
        }

        if (this.localesParameter) {
            this.addLocalesParameter(options);
        }

        if (this.membersParameter) {
            this.addMembersParameter(options);
        }

        if (this.searchSchema && this.searchValues) {
            this.addSearchParameter(options);
        }

        return options;
    }

    addPageSizeParameter(options) {
        options.parameters[this.pageSizeParameter] = this.pageSize;
    }

    addLocalesParameter(options) {
        options.parameters[this.localesParameter] = Array(...this.visibleLocales);
    }

    addMembersParameter(options) {
        let fields = new Set();
        for (let member of this.visibleMembers) {
            for (let field of member[cocktail.ui.dataSourceFields]) {
                fields.add(field);
            }
        }
        options.parameters[this.membersParameter] = Array.from(fields);
    }

    addSearchParameter(options) {
        for (let member of this.searchSchema.members()) {
            let value = this.searchValues[member.name];
            if (value !== null && value !== undefined && value !== "") {
                this.addSearchCriteriaParameter(options, member, value);
            }
        }
    }

    addSearchCriteriaParameter(options, member, value) {
        let paramName = this.getSearchCriteriaParameterName(member);
        let paramValue = this.getSearchCriteriaParameterValue(member, value);
        options.parameters[paramName] = paramValue;
    }

    getSearchCriteriaParameterName(member) {
        return "search_" + member.name;
    }

    getSearchCriteriaParameterValue(member, value) {
        return member.serializeValue(value);
    }

    loadNextPage() {
        let nextPage = this.page + 1;
        this.loadPage(nextPage).then(() => this.page = nextPage);
    }

    createColumns() {
        if (this.columnsReady) {
            return;
        }
        this.columnsReady = true;
        for (let member of this.visibleMembers) {
            let locales = member.translated ? this.visibleLocales : [null];
            for (let language of locales) {
                let heading = this.createHeading(member, language);
                this.headingsRow.appendChild(heading);
            }
        }
    }

    createHeading(member, language = null) {
        let heading = this.constructor.Heading.create();
        heading.member = member;
        heading.language = language;
        member[cocktail.ui.addAnnotations](heading);
        heading.label.innerHTML = member.translate();
        if (language) {
            heading.languageLabel.innerHTML = cocktail.ui.translations["cocktail.locales." + language];
        }
        else {
            heading.languageLabel.style.display = "none";
        }
        return heading;
    }

    setRows(records) {
        this.clearRows();
        this.addRows(records);
    }

    addRows(records) {

        let row;

        for (let record of records) {
            row = this.addRow(record);
        }

        // Subtract the scrollbar width from the headings row
        let table = this;
        function fixScrollWidth() {
            let outerWidth = table.body.offsetWidth;
            if (outerWidth) {
                let innerWidth = table.body.clientWidth;
                if (innerWidth != outerWidth) {
                    table.headingsRow.style.width = `calc(100% - ${outerWidth - innerWidth}px)`;
                    return;
                }
            }

            setTimeout(fixScrollWidth, 25);
        }
        fixScrollWidth();
    }

    reset() {
        this.clear();
        this.createColumns();
        this.update();
    }

    clear() {
        cocktail.ui.empty(this.headingsRow);
        this.columnsReady = false;
        this.clearRows();
    }

    clearRows() {
        cocktail.ui.empty(this.body);
        this.selectedElements = [];
    }

    reload() {
        if (this.dataBinding && this.value) {
            this.clearRows();
            this.loadPage(0).then(() => this.page = 0);
        }
    }

    addRow(record, position = null) {

        let row = this.createRow(record);

        if (position) {
            let anchor = (position.before || position.after);

            if (typeof(anchor) == "string") {
                anchor = this.getRow(anchor);
            }

            if (!anchor) {
                throw `Invalid row position: ${position}`;
            }

            if (position.after) {
                anchor = anchor.nextSibling;
            }

            this.body.insertBefore(row, anchor);
        }
        else {
            this.body.appendChild(row);
        }

        return row;
    }

    createRow(record) {
        let row = this.constructor.Row.create();
        row.visibleMembers = this.visibleMembers;
        row.visibleLocales = this.visibleLocales;
        row.dataBinding = this.dataBinding.itemBinding(null, record);
        return row;
    }

    getRow(value) {
        if (this.dataBinding && this.dataBinding.member.items && value !== null && value !== undefined) {
            value = this.dataBinding.member.items.serializeValue(value);
            if (value) {
                return this.body.querySelector(`[value='${value}']`);
            }
        }
        return null;
    }
    ?>

    <?js
    let table = this;
    this.scrollWatcher = new cocktail.ui.ScrollWatcher();
    this.scrollWatcher.callback = function () {
        table.loadNextPage();
        this.reset();
    }
    ?>

    <table id="table">

        <thead id="head">
            <tr id="headingsRow"/>
        </thead>

        <tbody id="body" tabindex="0">
            <?js
            let observer = new MutationObserver((mutations) => {
                instance.empty = !element.rows.length;
            });
            observer.observe(element, {childList: true});
            ?>
        </tbody>

    </table>

    <th ui:component="Heading">
        <span id="label"/>
        <span id="languageLabel"/>
    </th>

    <tr ui:component="Row">

        <ui:decoratedBy function="cocktail.ui.dataDisplay"/>

        <?class
        get table() {
            return this.parentInstance;
        }

        createCells() {
            for (let member of this.visibleMembers) {
                if (member.translated) {
                    for (let locale of this.visibleLocales) {
                        this.appendChild(this.createCell(member, locale));
                    }
                }
                else {
                    this.appendChild(this.createCell(member));
                }
            }
        }

        updateCells() {
            // Update cell values
            for (let cell of this.cells) {
                if (cell.dataBinding) {
                    let member = cell.dataBinding.member;
                    let value = this.value[member.name];
                    if (member.translated && cell.dataBinding.language) {
                        value = value[cell.dataBinding.language];
                    }
                    cell.value = value;
                }
            }
        }

        invalidation(change) {
            if (change.id == this.getAttribute("value")) {
                if (change.type == "modify") {
                    this.value = change.newState;
                }
                else if (change.type == "delete") {
                    this.parentNode.removeChild(this);
                }
            }
        }

        createCell(member, language = null) {
            let cell = this.constructor.Cell.create();
            cell.dataBinding = this.dataBinding.memberBinding(member, language);
            return cell;
        }

        getCell(member, language = null) {
            if (typeof(member) != "string") {
                member = member.name;
            }
            for (let cell of this.cells) {
                if (cell.dataBinding && cell.dataBinding.member.name == member) {
                    return cell;
                }
            }
            return null;
        }
        ?>

        <?on value:changed
        if (!this.cells.length) {
            this.createCells();
        }
        else {
            this.updateCells();
        }
        ?>

        <td ui:component="Cell">

            <ui:decoratedBy function="cocktail.ui.dataDisplay"/>

            <?class
            get row() {
                return this.parentNode;
            }

            get table() {
                return this.parentInstance;
            }
            ?>

            <?on value:changed
            cocktail.ui.empty(this);
            this.display = null;

            // Render the value using a custom component, if available, or fall
            // back to a string representation
            this.display = cocktail.ui.displays.createDisplay(
                this.dataBinding.childBinding(
                    this.dataBinding.object,
                    this.dataBinding.member,
                    this.dataBinding.language,
                    null,
                    newValue
                ),
                {wrapRawValues: false}
            );

            if (this.display) {
                this.appendChild(this.display);
            }
            else {
                this.innerHTML = this.dataBinding.member.translateValue(newValue);
            }
            ?>

        </td>

    </tr>

    <ui:cocktail.ui.LoadingSign id="loadingSign"/>

    <div id="errorBox">
        <ui:translation/>
        <div id="errorMessage"/>
    </div>

    <div id="emptyNotice">
        <ui:translation/>
    </div>

    <?js
    this.selectionContainer = this.body;
    ?>

</div>

