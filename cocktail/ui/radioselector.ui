<?xml version="1.0" encoding="utf-8"?>

<ui:element
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:using mixin="cocktail.ui.DataDisplay"/>

    <ui:property
        name="layout"
        type="string"
        default="vertical"
        reflected="true"/>

    <ui:property
        name="emptyOptionDisplayed"
        type="boolean"
        default="false"
        reflected="true"/>

    <ui:property
        name="disabled"
        type="boolean"
        reflected="true">
        <?on changed
        for (let [key, entry] of this[ENTRY_MAP]) {
            cocktail.ui.setReasonForDisabling(entry, "cocktail.ui.RadioSelector", newValue);
        }
        ?>
    </ui:property>

    <?head
    const ENTRIES_READY = Symbol("cocktail.ui.RadioSelector.ENTRIES_READY");
    const ENTRY_MAP = Symbol("cocktail.ui.RadioSelector.ENTRY_MAP");
    const SELECTING_ENTRY = Symbol("cocktail.ui.RadioSelector.SELECTING_ENTRY");
    const SERIALIZED_VALUE = Symbol("cocktail.ui.RadioSelector.SERIALIZED_VALUE");
    ?>

    <?class
    getEntry(value) {
        let member = this.dataBinding && this.dataBinding.member;
        if (member) {
            value = member.serializeValue(value);
            return this[ENTRY_MAP].get(value);
        }
        return null;
    }

    clearEntries() {
        this[ENTRY_MAP].clear();
        cocktail.ui.empty(this.entries);
    }

    createEntries() {
        this.clearEntries();
        let member = this.dataBinding && this.dataBinding.member;
        if (member) {
            let possibleValuesResolution = Promise.resolve(member.getPossibleValues());
            possibleValuesResolution.then((values) => {
                if (this.emptyOptionDisplayed) {
                    this.addEntry(null);
                }
                this.addEntries(values);
                this[ENTRIES_READY] = true;
                cocktail.ui.trigger(this, "entriesReady");
            });
        }
    }

    awaitEntries() {
        if (this[ENTRIES_READY]) {
            return Promise.resolve(null);
        }
        else {
            return new Promise((resolve, reject) => {
                this.addEventListener("entriesReady", () => resolve(null), {once: true});
            });
        }
    }

    addEntries(values) {
        if (values) {
            for (let value of values) {
                this.addEntry(value);
            }
        }
    }

    addEntry(value) {
        let entry = this.createEntry(value);
        this[ENTRY_MAP].set(this.dataBinding.member.serializeValue(value), entry);
        this.entries.appendChild(entry);
    }

    createEntry(value, prepend = false) {
        let serializedValue = this.dataBinding.member.serializeValue(value);
        let entry = this.constructor.Entry.create();
        cocktail.ui.setReasonForDisabling(entry, "cocktail.ui.RadioSelector", this.disabled);
        entry.entryValue = value;
        entry.input.value = serializedValue;
        entry.input.checked = this[SERIALIZED_VALUE] == entry.input.value;
        entry.labelText.innerHTML = this.dataBinding.member.translateValue(value);
        return entry;
    }

    get selectedEntry() {
        if (this[SERIALIZED_VALUE]) {
            return this[ENTRY_MAP].get(this[SERIALIZED_VALUE]);
        }
    }

    isSelected(value) {
        let entry = this.getEntry(value);
        return entry ? entry.input.checked : false;
    }
    ?>

    <?on value:changed
    if (this.dataBinding) {

        if (this[ENTRY_MAP] && this[SERIALIZED_VALUE]) {
            let previousEntry = this[ENTRY_MAP][this[SERIALIZED_VALUE]];
            if (previousEntry) {
                previousEntry.input.checked = false;
            }
        }

        this[SERIALIZED_VALUE] = this.dataBinding.member.serializeValue(newValue);

        if (this[ENTRY_MAP] && this[SERIALIZED_VALUE]) {
            let entry = this[ENTRY_MAP][this[SERIALIZED_VALUE]];
            if (entry) {
                entry.input.checked = true;
            }
        }
    }
    ?>

    <?on dataBinding:changed
    this.createEntries();
    ?>

    <?js
    this[ENTRY_MAP] = new Map();
    ?>

    <ul id="entries"/>

    <li ui:component="Entry">

        <ui:property
            name="disabled"
            type="boolean"
            default="false"
            reflected="true">
            <?on changed
            this.input.disabled = newValue;
            ?>
        </ui:property>

        <input id="input" type="radio" name="radio">
            <?on change
            if (this.checked) {
                instance.parentInstance.value = instance.entryValue;
            }
            ?>
        </input>

        <label id="label">
            <?js
            element.setAttribute("for", cocktail.requireId(this.input));
            ?>
            <span id="labelText"/>
        </label>
    </li>

</ui:element>

