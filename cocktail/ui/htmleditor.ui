<?xml version="1.0" encoding="utf-8"?>

<ui:element
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.delay"/>
    <ui:using mixin="cocktail.ui.DataDisplay"/>
    <ui:symbol name="PROCESSING_INPUT"/>
    <ui:symbol name="CONTENT_AREA_INITIALIZED"/>
    <ui:symbol name="WRAP_TEXT_IN_P_ELEMENT"/>
    <ui:symbol name="SHOW_SELECTION_PATH"/>
    <ui:symbol name="SHOW_BLOCK_TYPE"/>
    <ui:symbol name="CURRENT_ANCHOR_NODE"/>
    <ui:symbol name="CURRENT_RANGE"/>
    <ui:symbol name="STORE_RANGE"/>
    <ui:symbol name="RESTORE_RANGE"/>
    <ui:symbol name="SYNC"/>

    <ui:property
        name="multiline"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="autoHeight"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="toolboxVisible"
        type="boolean"
        reflected="true"
        default="false"/>

    <ui:property
        name="mode"
        type="string"
        reflected="true">
        <?on changed
        this.toolbox.updateActions();
        if (this.codeEditor.codeMirror) {
            setTimeout(() => this.codeEditor.codeMirror.refresh(), 1);
        }
        ?>
    </ui:property>

    <?tail
    cls.EditorActionSet = class EditorActionSet extends cocktail.ui.ActionSet {

        get translationKey() {
            return `cocktail.ui.HTMLEditor.actionSets.${this.id}`;
        }
    }

    cls.EditorAction = class EditorAction extends cocktail.ui.Action {

        get translationKey() {
            return `cocktail.ui.HTMLEditor.actions.${this.id}`;
        }

        getIconURL() {
            return `cocktail.ui://images/${this.id}.svg`;
        }

        getState(context) {
            if (!this.availableInMode(context.editor.mode)) {
                return "hidden";
            }
            return super.getState(context);
        }

        availableInMode(mode) {
            return mode == "visual";
        }
    }

    cls.CommandAction = (command, query = false) => class CommandAction extends cls.EditorAction {

        get command() {
            return command;
        }

        getState(context) {
            const state = super.getState(context);
            if (state == "visible" && query && document.queryCommandState(command)) {
                return "emphasized";
            }
            return state;
        }

        invoke(context) {
            document.execCommand(command);
        }
    }

    cls.SelectBlockTypeAction = class SelectBlockTypeAction extends cls.EditorAction {

        static get defaultComponent() {
            return cls.BlockTypeSelector;
        }
    }

    cls.BoldAction = class BoldAction extends cls.CommandAction("bold", true)  {}

    cls.ItalicAction = class ItalicAction extends cls.CommandAction("italic", true)  {}

    cls.ULAction = class ULAction extends cls.CommandAction("insertUnorderedList", true)  {}

    cls.OLAction = class OLAction extends cls.CommandAction("insertOrderedList", true)  {}

    cls.IndentAction = class IndentAction extends cls.CommandAction("indent")  {}

    cls.UnindentAction = class UnindentAction extends cls.CommandAction("unindent")  {}

    cls.LinkAction = class LinkAction extends cls.EditorAction {

        invoke(context) {
            context.editor.showLinkEditor();
        }
    }

    cls.CleanAction = class CleanAction extends cls.CommandAction("removeFormat") {}

    cls.HTMLAction = class HTMLAction extends cls.EditorAction {

        getState(context) {
            const state = super.getState(context);
            if (state == "visible" && context.editor.mode == "source") {
                return "emphasized";
            }
            return state;
        }

        availableInMode(mode) {
            return mode == "visual" || mode == "source";
        }

        invoke(context) {
            if (context.editor.mode == "visual") {
                context.editor.mode = "source";
                context.editor.codeEditor.codeMirror.focus();
            }
            else {
                context.editor.mode = "visual";
                context.editor.contentArea.focus();
            }
        }
    }
    ?>

    <?tail
    cls.toolbox = new cocktail.ui.ActionSet("html-toolbox", {
        entries: [
            new cls.EditorActionSet("format", {
                entries: [
                    new cls.SelectBlockTypeAction("block-type"),
                    new cls.BoldAction("bold"),
                    new cls.ItalicAction("italic"),
                    new cls.LinkAction("link"),
                    new cls.CleanAction("clean")
                ]
            }),
            new cls.EditorActionSet("lists", {
                entries: [
                    new cls.ULAction("ul"),
                    new cls.OLAction("ol"),
                    new cls.IndentAction("indent"),
                    new cls.UnindentAction("unindent")
                ]
            }),
            new cls.EditorActionSet("tools", {
                entries: [
                    new cls.HTMLAction("html")
                ]
            })
        ]
    });
    ?>

    <?class
    focus() {
        if (this.mode == "source") {
            this.codeEditor.codeMirror.focus();
        }
        else {
            this.contentArea.focus();
        }
    }

    showLinkEditor() {

        const selection = this.getSelection();
        let node = selection.anchorNode;
        this.linkEditor.linkNode = null;
        this.linkEditor.selectionRange = selection.getRangeAt(0);
        let value;

        while (node && node != this.contentArea) {
            if (node.nodeType == document.ELEMENT_NODE && node.tagName == "A") {
                this.linkEditor.linkNode = node;
                value = {
                    url: node.getAttribute("href"),
                    text: node.innerText,
                    title: node.title,
                    rel: node.getAttribute("rel"),
                    opensInNewWindow: (node.target == "_blank")
                };
                break;
            }
            node = node.parentNode;
        }

        if (!value) {
            value = this.linkEditor.form.dataBinding.member.defaults();
            value.text = selection.toString();
        }

        this.linkEditor.form.value = value;
        this.linkEditor.show();
    }

    getSelection() {
        return cocktail.ui.getShadow(this).getSelection();
    }

    [STORE_RANGE]() {
        const selection = this.getSelection();
        this[CURRENT_RANGE] = selection.rangeCount ? selection.getRangeAt(0) : null;
    }

    [RESTORE_RANGE]() {
        if (this[CURRENT_RANGE]) {
            const selection = this.getSelection();
            selection.removeAllRanges();
            selection.addRange(this[CURRENT_RANGE]);
        }
    }

    selectRange(range) {
        const sel = this.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }

    [WRAP_TEXT_IN_P_ELEMENT]() {
        // Automatically wrap text inside a <p> element
        const node = this.contentArea.firstChild;
        if (node && node.nodeType == document.TEXT_NODE && node.nodeValue.length) {
            const p = document.createElement("p");
            p.appendChild(node);
            this.contentArea.insertBefore(p, this.contentArea.firstChild);

            const range = document.createRange();
            range.setStart(node, node.nodeValue.length);
            range.collapse(true);
            this.selectRange(range);
        }
    }

    [SHOW_SELECTION_PATH]() {

        const selection = this.getSelection();
        let node = selection.anchorNode;

        // There's no point in updating the breadcrumbs if the selected element hasn't changed
        if (node == this[CURRENT_ANCHOR_NODE]) {
            return;
        }
        this[CURRENT_ANCHOR_NODE] = node;

        cocktail.ui.empty(this.breadcrumbs);

        while (node && node != this.contentArea) {
            if (node.nodeType == document.ELEMENT_NODE) {
                const li = document.createElement("li");
                li.innerText = node.tagName;
                this.breadcrumbs.insertBefore(li, this.breadcrumbs.firstChild);
            }
            node = node.parentNode;
        }
    }

    [SHOW_BLOCK_TYPE]() {
        const selection = this.getSelection();
        let node = selection.anchorNode;
        while (node) {
            if (node.parentNode === this.contentArea) {
                break;
            }
            node = node.parentNode;
        }
        let value = null;
        if (node && node.nodeType == document.ELEMENT_NODE) {
            value = node.tagName.toLowerCase();
        }
        this[SYNC](() => {
            for (let selector of this.toolbox.iterActionEntries(cls.SelectBlockTypeAction)) {
                selector.value = value;
            }
        });
    }

    setBlockType(tagName) {
        this.focus();
        this[RESTORE_RANGE]();
        document.execCommand("formatBlock", false, tagName.toLowerCase());
        this[STORE_RANGE]();
        this[SYNC](() => {
            for (let selector of this.toolbox.iterActionEntries(cls.SelectBlockTypeAction)) {
                selector.value = tagName.toLowerCase();
            }
        });
    }
    ?>

    <?on value:changed
    if (!this[PROCESSING_INPUT]) {
        this.contentArea.innerHTML = newValue;
    }
    ?>

    <?on focus
    this.toolboxVisible = true;
    ?>

    <?on blur
    this.toolboxVisible = false;
    ?>

    <?js
    this[SYNC] = cocktail.ui.sync();

    this.updateDelay = new cocktail.ui.Delay(200, () => {
        if (!instance[PROCESSING_INPUT]) {
            instance[PROCESSING_INPUT] = true;
            try {
                instance.value = this.contentArea.innerHTML;
            }
            finally {
                instance[PROCESSING_INPUT] = false;
            }
        }
    });
    ?>

    <ui:cocktail.ui.TabbedActionList id="toolbox">
        <?js
        element.classList.add("compact");
        element.actionContext.editor = this;
        element.actionSource = cls.toolbox;
        element.actionSetup();
        ?>
    </ui:cocktail.ui.TabbedActionList>

    <div id="contentFrame">

        <div id="contentArea" contenteditable="true">

            <?on input
            instance.updateDelay.begin();
            instance.toolbox.updateActions();
            instance[WRAP_TEXT_IN_P_ELEMENT]();
            ?>

            <?on mousedown
            instance.toolbox.updateActions();
            ?>

            <?on mouseup
            instance.toolbox.updateActions();
            instance[STORE_RANGE]();
            instance[SHOW_SELECTION_PATH]();
            instance[SHOW_BLOCK_TYPE]();
            ?>

            <?on keydown
            instance.toolbox.updateActions();
            ?>

            <?on keyup
            instance.toolbox.updateActions();
            instance[STORE_RANGE]();
            instance[SHOW_SELECTION_PATH]();
            instance[SHOW_BLOCK_TYPE]();
            ?>

            <?on focus
            if (!instance[CONTENT_AREA_INITIALIZED]) {
                instance[CONTENT_AREA_INITIALIZED] = true;
                document.execCommand("DefaultParagraphSeparator", false, "p");
                document.execCommand("insertBrOnReturn", false, "false");
                instance[WRAP_TEXT_IN_P_ELEMENT]();
            }
            instance[SHOW_BLOCK_TYPE]();
            ?>

            <?on blur
            cocktail.ui.empty(instance.breadcrumbs);
            this[CURRENT_ANCHOR_NODE] = null;
            ?>

        </div>

        <ul id="breadcrumbs"/>

    </div>

    <ui:cocktail.ui.CodeEditor id="codeEditor">
        <?js
        element.options = {lineWrapping: true};
        element.dataBinding = {
            member: new cocktail.schema.CodeBlock({
                name: "source",
                language: "html"
            })
        };
        ?>
    </ui:cocktail.ui.CodeEditor>

    <?js
    cocktail.ui.link(this, this.codeEditor, "value");
    this.mode = "visual";
    ?>

    <ui:LinkEditor id="linkEditor"/>

    <ui:cocktail.ui.ModalForm ui:component="LinkEditor">

        <ui:property
            name="linkNode"
            reflected="false"/>

        <ui:property
            name="selectionRange"
            reflected="false"/>

        <ui:property
            name="linkValues"
            reflected="false"/>

        <?class
        getFormSchema() {
            return new cocktail.schema.Schema({
                name: "cocktail.ui.HTMLEditor.LinkEditor.form",
                members: [
                    new cocktail.schema.String({
                        name: "url",
                        required: true
                    }),
                    new cocktail.schema.String({
                        name: "text",
                        required: true
                    }),
                    new cocktail.schema.String({
                        name: "title"
                    }),
                    new cocktail.schema.String({
                        name: "rel"
                    }),
                    new cocktail.schema.Boolean({
                        name: "opensInNewWindow",
                        required: true,
                        defaultValue: false
                    })
                ]
            });
        }
        ?>

        <?on accepted
        if (!this.linkNode) {
            this.linkNode = document.createElement("a");
            this.selectionRange.deleteContents();
            this.selectionRange.insertNode(this.linkNode);
        }

        const value = e.detail.value;

        // Fix/normalize the URL
        let url = value.url;
        
        if (!url.includes(":")) {
            if (url.includes("@") && !url.includes("/")) {
                url = "mailto:" + url;
            }
            else {
                url = "http://" + url;
            }
        }
        
        this.linkNode.setAttribute("href", url);
        this.linkNode.innerText = value.text;

        if (value.title) {
            this.linkNode.setAttribute("title", value.title);
        }
        else {
            this.linkNode.removeAttribute("title");
        }

        if (value.rel) {
            this.linkNode.setAttribute("rel", value.rel);
        }
        else {
            this.linkNode.removeAttribute("rel");
        }

        if (value.opensInNewWindow) {
            this.linkNode.setAttribute("target", "_blank");
        }
        else {
            this.linkNode.removeAttribute("target");
        }

        this.parentInstance.updateDelay.begin();
        ?>

        <?on closed
        if (this.linkNode) {
            const range = document.createRange();
            range.selectNode(this.linkNode);
            this.parentInstance.selectRange(range);
        }
        this.parentInstance.focus();
        ?>

        <span slot="heading">
            <ui:translation key=".heading"/>
        </span>

        <ui:with ui:element="form">
            <?js
            const member = instance.getFormSchema();
            const value = member.defaults();
            element.dataBinding = {member, value};
            ?>
        </ui:with>

    </ui:cocktail.ui.ModalForm>

    <ui:cocktail.ui.ActionListDropdownSelector
        ui:component="BlockTypeSelector">

        <ui:symbol name="..SYNC"/>

        <?class
        actionSetup() {
            this.dataBinding = {
                member: new cocktail.schema.String({
                    enumeration: [
                        "p",
                        "h1",
                        "h2",
                        "h3",
                        "h4",
                        "h5",
                        "h6",
                        "div",
                        "blockquote",
                        "code"
                    ],
                    translateValue(value) {
                        return cocktail.ui.translations[cls.fullName + ".blockTypes." + value];
                    }
                })
            };
            super.actionSetup();
        }

        focusAfterSelection() {
        }
        ?>

        <?on value:changed
        const editor = this.getActionContext().editor;
        editor[SYNC](() => {
            editor.setBlockType(newValue);
        });
        ?>

    </ui:cocktail.ui.ActionListDropdownSelector>

</ui:element>

