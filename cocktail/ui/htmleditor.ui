<?xml version="1.0" encoding="utf-8"?>

<div
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.delay"/>
    <ui:using mixin="cocktail.ui.DataDisplay"/>
    <ui:symbol name="PROCESSING_INPUT"/>
    <ui:symbol name="CONTENT_AREA_INITIALIZED"/>

    <ui:property
        name="multiline"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="autoHeight"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="toolboxVisible"
        type="boolean"
        reflected="true"
        default="false"/>

    <?tail
    cls.EditorAction = class EditorAction extends cocktail.ui.Action {

        get translationKey() {
            return `cocktail.ui.HTMLEditor.actions.${this.id}`;
        }

        get iconURL() {
            return `cocktail.ui://images/${this.id}.svg`;
        }
    }

    cls.BoldAction = class BoldAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("bold");
        }
    }

    cls.ItalicAction = class ItalicAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("italic");
        }
    }

    cls.ULAction = class ULAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("insertUnorderedList");
        }
    }

    cls.OLAction = class OLAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("insertOrderedList");
        }
    }

    cls.IndentAction = class IndentAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("indent");
        }
    }

    cls.UnindentAction = class UnindentAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("unindent");
        }
    }

    cls.CleanAction = class CleanAction extends cls.EditorAction {

        invoke(context) {
            document.execCommand("removeFormat");
        }
    }
    ?>

    <?class
    createToolbars() {
        for (let actions of this.getActionSets()) {
            const toolbar = this.constructor.Toolbar.create();
            toolbar.actionParameters = {editor: this};
            toolbar.actions = actions;
            this.toolbox.appendChild(toolbar);
        }
    }

    getActionSets() {
        return [
            [
                new cls.BoldAction("bold"),
                new cls.ItalicAction("italic"),
                new cls.ULAction("ul"),
                new cls.OLAction("ol"),
                new cls.IndentAction("indent"),
                new cls.UnindentAction("unindent"),
                new cls.CleanAction("clean")
            ]
        ];
    }
    ?>

    <?on value:changed
    if (!this[PROCESSING_INPUT]) {
        this.contentArea.innerHTML = newValue;
    }
    ?>

    <?on focus
    this.toolboxVisible = true;
    ?>

    <?on blur
    this.toolboxVisible = false;
    ?>

    <?js
    this.updateDelay = new cocktail.ui.Delay(200, () => {
        if (!instance[PROCESSING_INPUT]) {
            instance[PROCESSING_INPUT] = true;
            try {
                instance.value = this.contentArea.innerHTML;
            }
            finally {
                instance[PROCESSING_INPUT] = false;
            }
        }
    });
    ?>

    <div id="toolbox"/>

    <ui:cocktail.ui.ActionList
        ui:component="Toolbar"
        buttonStyle="iconOnly">
        <?js
        element.classList.add("compact");
        ?>
    </ui:cocktail.ui.ActionList>

    <div id="contentArea" contenteditable="true">

        <?on input
        instance.updateDelay.begin();
        ?>

        <?on focus
        if (!instance[CONTENT_AREA_INITIALIZED]) {
            instance[CONTENT_AREA_INITIALIZED] = true;
            document.execCommand("DefaultParagraphSeparator", false, "p");
        }
        ?>
    </div>

    <?js
    this.createToolbars();
    ?>

</div>

