<?xml version="1.0" encoding="utf-8"?>

<ui:element
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://www.whads.com/ns/cocktail/ui">

    <ui:requires component="cocktail.ui.delay"/>
    <ui:using mixin="cocktail.ui.DataDisplay"/>
    <ui:symbol name="PROCESSING_INPUT"/>
    <ui:symbol name="CONTENT_AREA_INITIALIZED"/>
    <ui:symbol name="WRAP_TEXT_IN_P_ELEMENT"/>
    <ui:symbol name="SHOW_SELECTION_PATH"/>
    <ui:symbol name="CURRENT_ANCHOR_NODE"/>

    <ui:property
        name="multiline"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="autoHeight"
        type="boolean"
        reflected="true"
        default="true"/>

    <ui:property
        name="toolboxVisible"
        type="boolean"
        reflected="true"
        default="false"/>

    <ui:property
        name="mode"
        type="string"
        reflected="true">
        <?on changed
        this.toolbox.updateActions();
        if (this.codeEditor.codeMirror) {
            setTimeout(() => this.codeEditor.codeMirror.refresh(), 1);
        }
        ?>
    </ui:property>

    <?tail
    cls.EditorActionSet = class EditorActionSet extends cocktail.ui.ActionSet {

        get translationKey() {
            return `cocktail.ui.HTMLEditor.actionSets.${this.id}`;
        }
    }

    cls.EditorAction = class EditorAction extends cocktail.ui.Action {

        get translationKey() {
            return `cocktail.ui.HTMLEditor.actions.${this.id}`;
        }

        getIconURL() {
            return `cocktail.ui://images/${this.id}.svg`;
        }

        getState(context) {
            if (!this.availableInMode(context.editor.mode)) {
                return "hidden";
            }
            return super.getState(context);
        }

        availableInMode(mode) {
            return mode == "visual";
        }
    }

    cls.CommandAction = (command, query = false) => class CommandAction extends cls.EditorAction {

        get command() {
            return command;
        }

        getState(context) {
            const state = super.getState(context);
            if (state == "visible" && query && document.queryCommandState(command)) {
                return "emphasized";
            }
            return state;
        }

        invoke(context) {
            document.execCommand(command);
        }
    }

    cls.BoldAction = class BoldAction extends cls.CommandAction("bold", true)  {}

    cls.ItalicAction = class ItalicAction extends cls.CommandAction("italic", true)  {}

    cls.ULAction = class ULAction extends cls.CommandAction("insertUnorderedList", true)  {}

    cls.OLAction = class OLAction extends cls.CommandAction("insertOrderedList", true)  {}

    cls.IndentAction = class IndentAction extends cls.CommandAction("indent")  {}

    cls.UnindentAction = class UnindentAction extends cls.CommandAction("unindent")  {}

    cls.CleanAction = class CleanAction extends cls.CommandAction("removeFormat") {}

    cls.HTMLAction = class HTMLAction extends cls.EditorAction {

        getState(context) {
            const state = super.getState(context);
            if (state == "visible" && context.editor.mode == "source") {
                return "emphasized";
            }
            return state;
        }

        availableInMode(mode) {
            return mode == "visual" || mode == "source";
        }

        invoke(context) {
            if (context.editor.mode == "visual") {
                context.editor.mode = "source";
                context.editor.codeEditor.codeMirror.focus();
            }
            else {
                context.editor.mode = "visual";
                context.editor.contentArea.focus();
            }
        }
    }
    ?>

    <?tail
    cls.toolbox = new cocktail.ui.ActionSet("html-toolbox", {
        entries: [
            new cls.EditorActionSet("format", {
                entries: [
                    new cls.BoldAction("bold"),
                    new cls.ItalicAction("italic"),
                    new cls.CleanAction("clean")
                ]
            }),
            new cls.EditorActionSet("lists", {
                entries: [
                    new cls.ULAction("ul"),
                    new cls.OLAction("ol"),
                    new cls.IndentAction("indent"),
                    new cls.UnindentAction("unindent")
                ]
            }),
            new cls.EditorActionSet("tools", {
                entries: [
                    new cls.HTMLAction("html")
                ]
            })
        ]
    });
    ?>

    <?class
    focus() {
        if (this.mode == "source") {
            this.codeEditor.codeMirror.focus();
        }
        else {
            this.contentArea.focus();
        }
    }

    selectRange(range) {
        const sel = cocktail.ui.getShadow(this).getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
    }

    [WRAP_TEXT_IN_P_ELEMENT]() {
        // Automatically wrap text inside a <p> element
        const node = this.contentArea.firstChild;
        if (node && node.nodeType == document.TEXT_NODE && node.nodeValue.length) {
            const p = document.createElement("p");
            p.appendChild(node);
            this.contentArea.insertBefore(p, this.contentArea.firstChild);

            const range = document.createRange();
            range.setStart(node, node.nodeValue.length);
            range.collapse(true);
            this.selectRange(range);
        }
    }

    [SHOW_SELECTION_PATH]() {
        const selection = cocktail.ui.getShadow(this).getSelection();

        let node = selection.anchorNode;

        if (node == this[CURRENT_ANCHOR_NODE]) {
            return;
        }
        this[CURRENT_ANCHOR_NODE] = node;

        cocktail.ui.empty(this.breadcrumbs);
        let count = 0;
        while (node && node != this.contentArea) {

            if (node.nodeType == document.ELEMENT_NODE) {
                const li = document.createElement("li");
                li.innerText = node.tagName;
                this.breadcrumbs.insertBefore(li, this.firstChild);
            }
            if(count > 0 && node.parentNode && node.parentNode!=this.contentArea){
                const li = document.createElement("li");
                li.innerText = "Â»"
                this.breadcrumbs.insertBefore(li, this.firstChild);
            }
            count++
            node = node.parentNode;
        }
    }
    ?>

    <?on value:changed
    if (!this[PROCESSING_INPUT]) {
        this.contentArea.innerHTML = newValue;
    }
    ?>

    <?on focus
    this.toolboxVisible = true;
    ?>

    <?on blur
    this.toolboxVisible = false;
    ?>

    <?js
    this.updateDelay = new cocktail.ui.Delay(200, () => {
        if (!instance[PROCESSING_INPUT]) {
            instance[PROCESSING_INPUT] = true;
            try {
                instance.value = this.contentArea.innerHTML;
            }
            finally {
                instance[PROCESSING_INPUT] = false;
            }
        }
    });
    ?>

    <ui:cocktail.ui.TabbedActionList id="toolbox">
        <?js
        element.classList.add("compact");
        element.actionContext.editor = this;
        element.actionSource = cls.toolbox;
        element.actionSetup();
        ?>
    </ui:cocktail.ui.TabbedActionList>

    <div id="contentFrame">

        <div id="contentArea" contenteditable="true">

            <?on input
            instance.updateDelay.begin();
            instance.toolbox.updateActions();
            instance[WRAP_TEXT_IN_P_ELEMENT]();
            ?>

            <?on mousedown
            instance.toolbox.updateActions();
            ?>

            <?on mouseup
            instance.toolbox.updateActions();
            instance[SHOW_SELECTION_PATH]();
            ?>

            <?on keydown
            instance.toolbox.updateActions();
            ?>

            <?on keyup
            instance.toolbox.updateActions();
            instance[SHOW_SELECTION_PATH]();
            ?>

            <?on focus
            if (!instance[CONTENT_AREA_INITIALIZED]) {
                instance[CONTENT_AREA_INITIALIZED] = true;
                document.execCommand("DefaultParagraphSeparator", false, "p");
                document.execCommand("insertBrOnReturn", false, "false");
                instance[WRAP_TEXT_IN_P_ELEMENT]();
            }
            ?>
            <?on blur
            cocktail.ui.empty(instance.breadcrumbs);
            this[CURRENT_ANCHOR_NODE] = null;
            ?>

        </div>

        <ul id="breadcrumbs"/>

    </div>

    <ui:cocktail.ui.CodeEditor id="codeEditor">
        <?js
        element.options = {lineWrapping: true};
        element.dataBinding = {
            member: new cocktail.schema.CodeBlock({
                name: "source",
                language: "html"
            })
        };
        ?>
    </ui:cocktail.ui.CodeEditor>

    <?js
    cocktail.ui.link(this, this.codeEditor, "value");
    this.mode = "visual";
    ?>

</ui:element>

