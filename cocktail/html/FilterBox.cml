<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.schema.expressions import normalize
from cocktail.controllers import get_state, view_state, serialize_parameter
?>

<form
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    filters = ()
    available_filters = ()
    ?>

    <div py:id="filter_list">
        <py:ready>            
            <py:new
                py:element="self.create_filter_entry(index, filter)"
                py:for="index, filter in enumerate(self.filters)"/>
        </py:ready>
    </div>

    <div py:def="filter_entry" py:args="index, filter">
        <input type="hidden" name="filter" value="${filter.id}"/>
        <span class="filter_desc">${translate(filter)}</span>
        <py:new
            py:element="filter.create_ui()"
            py:name_suffix="${str(index)}">
            <?py
            element.add_class("filter_ui")
            ?>
        </py:new>
        <a>
            <?py
            filter_param = []
            params = {"page": "0"}
                       
            for i, f in enumerate(self.filters):

                if i != index:
                    filter_param.append(f.id)

                if i >= index:
                    for member in f.schema.members().itervalues():
                        params["filter_" + member.name + str(i)] = ""
                    if i > index:
                        for member in f.schema.members().itervalues():
                            params["filter_" + member.name + str(i - 1)] = \
                                serialize_parameter(
                                    member,
                                    getattr(f, member.name)
                                )

            params["filter"] = filter_param or ""
            element["href"] = "?" + view_state(**params)
            ?>
            <img src="/resources/images/delete_small.png"/>
        </a>
    </div>

    <div py:id="buttons">

        <div py:id="new_filter_selector" class="selector">
            <span class="label">${translate("cocktail.html.FilterBox add filter")}</span>
            <div class="selector_content">
                <py:ready>
                    <?py
                    filter_items = [(translate(filter), filter)
                                    for filter in self.available_filters]

                    filter_items.sort(key = lambda item: normalize(item[0]))
                    ?>
                    <a py:for="desc, filter in filter_items">
                        <?py
                        filter_param = []
                        params = {"page": 0, "filter": filter_param}

                        for i, f in enumerate(self.filters):
                            filter_param.append(f.id)
                            for member in f.schema.members().itervalues():
                                params["filter_" + member.name + str(i)] = \
                                    serialize_parameter(
                                        member,
                                        getattr(f, member.name)
                                    )

                        filter_param.append(filter.id)
                        element["href"] = "?" + view_state(**params)
                        ?>
                        ${desc}
                    </a>
                </py:ready>
            </div>
        </div>

        <a py:id="discard_button">
            <py:ready>
                <?py
                params = {"page": 0, "filter": ""}

                for i, f in enumerate(self.filters):
                    for member in f.schema.members().itervalues():
                        params["filter_" + member.name + str(i)] = None

                element["href"] = "?" + view_state(**params)
                ?>
            </py:ready>
            ${translate("cocktail.html.FilterBox remove filters")}
        </a>

        <button py:id="search_button" type="submit">
            ${translate("cocktail.html.FilterBox apply filters")}
        </button>
    </div>

</form>
