<?xml version="1.0" encoding="utf-8"?>

<?py
from cocktail.modeling import refine
from cocktail.controllers.viewstate import view_state_form
from cocktail.html.datadisplay import MULTIPLE_SELECTION
?>

<form
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates"
    method="get">

    <?py-class
    actions = ()
    selection_mode = MULTIPLE_SELECTION
    user_collection = None
    ?>
    
    <?py
    self.add_resource("/cocktail/scripts/jquery.cookie.js")
    self.add_resource("/cocktail/scripts/CollectionView.js")
    self.add_client_translation("CollectionView selection")
    self.add_client_translation("CollectionView all")
    self.add_client_translation("CollectionView none")
    ?>

    <py:ready>
        <?py
        excluded = ["members", "language", "page_size", "selection"]

        for i, filter in enumerate(self.user_collection.user_filters):
            for member in filter.schema.members().itervalues():
                excluded.append("filter_" + member.name + str(i))
        
        params = dict((key, None) for key in excluded)
        element.append(view_state_form(**params))
        ?>
    </py:ready>

    <!-- Paging -->
    <py:cocktail.html.PagingControls
        py:id="paging_controls"
        py:user_collection="@{self.user_collection}"/>

    <div py:id="toolbar">

        <!-- Actions -->
        <div py:id="actions_box" py:collapsible="${True}">

            <button
                py:def="toolbar_button"
                py:args="action"
                class="toolbar_button ${action}"
                name="section">
                <?py
                shortcut = translate("CollectionView " + action + " shortcut", default = "")
                if shortcut:
                    element.set_client_param("shortcut", shortcut)
                ?>
                <img src="/resources/images/${action}.png"/>
                <label>${translate(action)}</label>
            </button>

            <py:ready>
                <py:new
                    py:element="self.create_toolbar_button(action)"
                    py:for="action in self.actions"/>
            </py:ready>
        </div>

        <!-- Settings -->
        <div py:id="settings_box">

            <!-- Visible members  -->
            <div py:id="visible_members" class="toolbar_button selector">
                <?py
                shortcut = translate("CollectionView visible members shortcut", default = "")
                if shortcut:
                    element.set_client_param("shortcut", shortcut)
                ?>
                <span class="label">
                    ${translate("Visible members")}
                </span>
                <div class="selector_content">

                    <py:cocktail.html.CheckList
                        py:id="visible_members_selector"
                        py:name="members"
                        py:items="@{self.user_collection.schema.ordered_members()}"
                        py:value="@{self.user_collection.members}">

                        <?py
                        @refine(element)
                        def get_item_value(self, item):
                            if isinstance(item, basestring):
                                return item
                            else:
                                return item.name

                        @refine(element)
                        def get_item_label(self, member):
                            return translate(member)
                        ?>
                    </py:cocktail.html.CheckList>

                    <button name="section" value="content">${translate("Submit")}</button>
                </div>
            </div>

            <!-- Visible languages -->
            <div py:id="visible_languages" class="toolbar_button selector">
                <?py
                shortcut = translate("CollectionView visible languages shortcut", default = "")
                if shortcut:
                    element.set_client_param("shortcut", shortcut)
                ?>                
                <span class="label">
                    ${translate("Visible languages")}
                </span>
                <div class="selector_content">
                    
                    <py:cocktail.html.CheckList
                        py:id="visible_languages_selector"
                        py:name="language"
                        py:items="@{self.available_languages}"
                        py:value="@{self.visible_languages}"/>

                    <button name="section" value="content">${translate("Submit")}</button>
                </div>
            </div>
            
        </div>

    </div>

    <!-- Filters -->
    <div
        py:id="filters"
        py:visible="@{self.user_collection.allow_filters}">
        <py:ready>
            <py:block py:if="self.filters.visible">
                <?py
                if not self.user_collection.user_filters:
                    self.filters.add_class("empty")

                shortcut = translate("CollectionView filters shortcut", default = "")
                if shortcut:
                    self.filters.set_client_param("shortcut", shortcut)
                ?>
                <div class="label">${translate("Filters")}
                    <span
                        py:id="filter_count"
                        py:visible="${bool(self.user_collection.user_filters)}">
                        (${len(self.user_collection.user_filters)})
                    </span>
                </div>
                <py:cocktail.html.FilterBox
                    py:id="filters_selector"
                    py:tag="div"
                    py:filters="${self.user_collection.user_filters}"
                    py:available_filters="${self.user_collection.available_filters}"/>
            </py:block>
        </py:ready>
    </div>

    <!-- Data -->
    <py:cocktail.html.Table py:id="collection_display"/>

    <div py:id="no_results">
        ${translate("No results")}
    </div>

    <py:ready>
        <?py
        self.collection_display.user_collection = self.user_collection
        self.collection_display.selection_mode = self.selection_mode
        results_visible = bool(self.user_collection.page_subset())
        self.collection_display.visible = results_visible
        self.no_results.visible = not results_visible
        ?>
    </py:ready>

</form>
